rows_vc = sample(nrow(vc_test))
rows_sc = sample(nrow(sc_test))
data_test = rbind(ag_test[rows_ag,][1:200,],cp_test[rows_cp,],fp_test[rows_fp,],sc_test[1:100],vc_test[rows_vc,][1:197,])
data_test = rbind(ag_test[rows_ag,][1:200,],cp_test[rows_cp,],fp_test[rows_fp,],sc_test[1:100,],vc_test[rows_vc,][1:197,])
str(data_train)
data_train$final = paste(data_train$V1,data_train$V2,data_train$V3,data_train$V4,data_train$V5,sep = " ")
data_test$final = paste(data_test$V1,data_test$V2,data_test$V3,data_test$V4,data_test$V5,sep = " ")
write(data_train$final,"latest_SL_train.list")
write(data_test$final,"latest_SL_test.list")
table(grepl(".mp4",data$V1))
table(grepl(".mp4",sc$V1))
sc$V1 = gsub(".mp4","",sc$V1)
sc$V2 = gsub(".mp4","",sc$V2)
sc_train$V2 = gsub(".mp4","",sc_train$V2)
sc_train$V1 = gsub(".mp4","",sc_train$V1)
sc_test$V1 = gsub(".mp4","",sc_test$V1)
sc_test$V2 = gsub(".mp4","",sc_test$V2)
data_train = rbind(ag_train[rows_ag,][1:850,],cp_train[rows_cp,][1:650,],fp_train[rows_fp,],sc_train,vc_train[rows_vc,][1:700,])
rows_ag = sample(nrow(ag_train))
rows_cp = sample(nrow(cp_train))
rows_fp = sample(nrow(fp_train))
rows_vc = sample(nrow(vc_train))
data_train = rbind(ag_train[rows_ag,][1:850,],cp_train[rows_cp,][1:650,],fp_train[rows_fp,],sc_train,vc_train[rows_vc,][1:700,])
rows_ag = sample(nrow(ag_test))
rows_cp = sample(nrow(cp_test))
rows_fp = sample(nrow(fp_test))
rows_vc = sample(nrow(vc_test))
rows_sc = sample(nrow(sc_test))
data_test = rbind(ag_test[rows_ag,][1:200,],cp_test[rows_cp,],fp_test[rows_fp,],sc_test[1:100,],vc_test[rows_vc,][1:197,])
data_train$final = paste(data_train$V1,data_train$V2,data_train$V3,data_train$V4,data_train$V5,sep = " ")
data_test$final = paste(data_test$V1,data_test$V2,data_test$V3,data_test$V4,data_test$V5,sep = " ")
write(data_train$final,"latest_SL_train.list")
write(data_test$final,"latest_SL_test.list")
x = sequence(20,300,300)
x
y_train = c(58.3,67.5,70.8,72,77.7,79.2,83,82.2,83.5,80.8,84.8,83.5,84.5,86.2,84.2,85,82.0,83.3)
x = sequence(17,300,300)
x = sequence(18,300,300)
plot(x,y_train,type = "l")
library(ggplot1)
library(ggplot2)
qplot(x,y_train)
qplot(x,y_train,geom = "lines")
qplot(x,y_train,geom = "geom_lines")
qplot(x,y_train,geom = "geom_line")
qplot(x,y_train,geom = line)
qplot(x,y_train,geom = lines)
plot(x,yy_train)
plot(x,y_train)
plot(x,y_train,type = "l")
plot(x,y_train,type = "l",col = "red")
table(data_train$V3)
500*5
rows_ag = sample(nrow(ag_train))
rows_cp = sample(nrow(cp_train))
rows_fp = sample(nrow(fp_train))
rows_vc = sample(nrow(vc_train))
data_train = rbind(ag_train[rows_ag,][1:500,],cp_train[rows_cp,][1:500,],fp_train[rows_fp,][1:500,],sc_train,sc_train,sc_train[rows_sc,][1:72,],vc_train[rows_vc,][1:500,])
str(data_train)
data_train$final = paste(data_train$V1,data_train$V2,data_train$V3,data_train$V4,data_train$V5,sep = " ")
write(data_test$final,"latest_SL_test_new.list")
write(data_train$final,"latest_SL_train_new.list")
y_train - c(20.5,19.7,30.2,47.3,60.3,68.3,73.7,75.7,74.0,78.0,79.2,77.7,75.7,81.7,86,78.7,85.3,76.2,88.5,85.0,84.0,80.2)
y_train =\ c(20.5,19.7,30.2,47.3,60.3,68.3,73.7,75.7,74.0,78.0,79.2,77.7,75.7,81.7,86,78.7,85.3,76.2,88.5,85.0,84.0,80.2)
y_train = c(20.5,19.7,30.2,47.3,60.3,68.3,73.7,75.7,74.0,78.0,79.2,77.7,75.7,81.7,86,78.7,85.3,76.2,88.5,85.0,84.0,80.2)
y_train
load(".RData")
y_train = c(20.5,19.7,30.2,47.3,60.3,68.3,73.7,75.7,74.0,78.0,79.2,77.7,75.7,81.7,86,78.7,85.3,76.2,88.5,85.0,84.0,80.2)
x = seqience(22,200,200)
x = sequence(22,200,200)
plot(x,y,type = "l")
plot(x,y_train,type = "l")
y_train = c(20.5,19.7,30.2,47.3,60.3,68.3,73.7,75.7,74.0,78.0,79.2,77.7,75.7,81.7,86,78.7,85.3,76.2,88.5,85.0,84.0,80.2,90.3)
x = sequence(23,200,200)
plot(x,y_train,type = "l")
library(ggplot2)
qplot(x,y_train)
qplot(x,y_train,geom = "line")
qplot(x,y_train,geom = "line",col = "red")
qplot(x,y_train,geom = "line",color = "red")
qplot(x,y_train,geom = "line",fill = "red")
qplot(x,y_train,geom = "line",color = "red")
qplot(x,y_train,geom = "line",color = "red",geom = "smooth")
qplot(x,y_train,geom = c("line","smooth"),color = "red")
qplot(x,y_train,geom = "line",color = "red",geom = "smooth")
qplot(x,y_train,geom = "line",color = "red")
qplot(x,y_train,geom = "line",color = "red",title = "sd")
qplot(x,y_train,geom = "line",color = "red")
qplot(x,y_train,geom = "line",color = "red")
y_train = c(20.5,19.7,30.2,47.3,60.3,68.3,73.7,75.7,74.0,78.0,79.2,77.7,75.7,81.7,86,78.7,85.3,76.2,88.5,85.0,84.0,80.2,90.3,83.7)
x = sequence(24,200,200)
qplot(x,y_train,geom = "line",color = "red")
qplot(x,y_train,geom = c("line","smooth"),color = "red")
y_train = c(20.5,19.7,30.2,47.3,60.3,68.3,73.7,75.7,74.0,78.0,79.2,77.7,75.7,81.7,86,78.7,85.3,76.2,88.5,85.0,84.0,80.2,90.3,83.7,82.3)
x = sequence(25,200,200)
qplot(x,y_train,geom = "line",color = "red")
y_train = c(20.5,19.7,30.2,47.3,60.3,68.3,73.7,75.7,74.0,78.0,79.2,77.7,75.7,81.7,86,78.7,85.3,76.2,88.5,85.0,84.0,80.2,90.3,83.7,82.3,86)
x = sequence(26,200,200)
qplot(x,y_train,geom = "line",color = "red")
y_train = c(20.5,19.7,30.2,47.3,60.3,68.3,73.7,75.7,74.0,78.0,79.2,77.7,75.7,81.7,86,78.7,85.3,76.2,88.5,85.0,84.0,80.2,90.3,83.7,82.3,86,87.3)
x = sequence(27,200,200)
qplot(x,y_train,geom = "line",color = "red")
x = sequence(28,200,200)
y_train = c(20.5,19.7,30.2,47.3,60.3,68.3,73.7,75.7,74.0,78.0,79.2,77.7,75.7,81.7,86,78.7,85.3,76.2,88.5,85.0,84.0,80.2,90.3,83.7,82.3,86,87.3,89.5)
qplot(x,y_train,geom = "line",color = "red")
y_train = c(20.5,19.7,30.2,47.3,60.3,68.3,73.7,75.7,74.0,78.0,79.2,77.7,75.7,81.7,86,78.7,85.3,76.2,88.5,85.0,84.0,80.2,90.3,83.7,82.3,86,87.3,89.5,88.8)
x = sequence(29,200,200)
qplot(x,y_train,geom = "line",color = "red")
y_train = c(20.5,19.7,30.2,47.3,60.3,68.3,73.7,75.7,74.0,78.0,79.2,77.7,75.7,81.7,86,78.7,85.3,76.2,88.5,85.0,84.0,80.2,90.3,83.7,82.3,86,87.3,89.5,88.8,89.3)
x = sequence(30,200,200)
qplot(x,y_train,geom = "line",color = "red")
22*35
22*70
22*105
20*105
22*100
load(".RData")
load(".Rhistory")
data_temp = rbind(ag_train[rows_ag,][501:650,],cp_train[rows_cp,][501:650,],fp_train[rows_fp,][501:593,],sc[rows_sc,][1:150],vc_train[rows_vc,][501:650,])
data_temp = rbind(ag_train[rows_ag,][501:650,],cp_train[rows_cp,][501:650,],fp_train[rows_fp,][501:593,],sc[rows_sc,][1:150,],vc_train[rows_vc,][501:650,])
data_temp$final = paste(data_temp$V1,data_temp$V2,data_temp$V3,data_temp$V4,data_temp$V5,sep = " ")
set.seed(seed)
n = sample(nrow(temp))
n = sample(nrow(data_temp))
data_temp = data_temp[n,]
write(data_temp$final,"test.list")
22*30
22*31
data_train[500,]
data_train[501,]
data_train["5005",]
data_train[500,]
ag_train[500,]
ag_train[rows_ag,][500,]
data_train[500,]
ag_train[rows_ag,][500,]
22*31
x
x_test = sequence(12,1800,200)
x_test
x_test = sequence(22,1800,200)
x_test
plot(x,y_train,type = "l",col="red")
plot(x,y_train,type = "l",col="red",xlab = "Iterations",ylab = "Accuracy")
y_test = c(72,80,80,78.3,73.4,81.67,82.8,78.0,80,78.15,81.37,81.9,81.23,80.35,84.6,83.8,82.8,86.5,85.0,83.7,85.33,87.2)
lines(x_test,y_test,col="blue")
legend("topleft",legend = c("train","test"),col = c("red","blue"))
legend("topleft",legend = c("train","test"),col = c("red","blue"),pch = 17)
x
y_train
y_train = c(20.5)
y_train = c(20.5,19.7,30.2,47.3,60.3,68.3,73.7,75.7,74,78.0,79.2,77.7,75.7,81.7,86.0,78.7,85.3,76.2,88.5,85.0,84,80.2,90.3,83.7,82.3,86,87.3,89.5,88.8,89.3)
x_train = sequence(30,200,200)
x_train
plot(x_train,y_train,type = "l",col="red",xlab = "Iterations",ylab = "Accuracy")
lines(x_test,y_test,col="blue")
legend("topleft",legend = c("train","test"),col = c("red","blue"),pch = 17)
22*31
2500/4
data[l_test,]
table(data[l_test1,]$V3)
unique(data[l_test1,]$V6)
unique(data[l_train1,]$V6)
str(data)
d=c(1,2,3,4,5)
sd(d)
mean(d)
pnorm(0)
pnorm(1)
d = c(16)
d = c(16.70,16
)
d = c(16.7,16,65,16.68,16.60,16.58,16.63)
sd(d)
d
d = c(16.7,16.65,16.68,16.60,16.58,16.63)
sd(d)
x = sd(d)
x^2
diff = d-mean(d)
mean(diff)
diff
diff = abs(d-mean(d))
mean(diff)
clear
std_dev->function(data){
sd(data)
}
std_dev<-function(data){
sd(data)
}
std_dev(d)
std_dev<-function(data){
sd(data)
}
avg_dev<-function(data)
{
d1 = abs(data-mean(data))
mean(d1)
}
rel_avg_dev<-function(data)
{
d_bar = avg_dev(data)
ans = (d_bar/mean(data))*1000
ans
}
rel_avg_dev(d)
0.036/16.64
mean(d)
median(d)
range(d)
mean(d)
median(d)
range(d)
load("functions.R")
source("functions.R")
s_mean(data)
s_mean(d)
t.test(d)
t.test(d,conf.level = 0.9)
t = 93.50,93.58,93.43
t = c(93.50,93.58,93.43)
pt(0.95,df = 2)
qt(p = 0.95,df = 2)
qt(p = 0.05,df = 2)
qt(p = 0.025,df = 2)
std_dev<-function(data){
sd(data)
}
avg_dev<-function(data)
{
d1 = abs(data-mean(data))
mean(d1)
}
rel_avg_dev<-function(data)
{
d_bar = avg_dev(data)
ans = (d_bar/mean(data))
ans
}
rsd<-function(data)
{
s = sd(data)
ans = (s/mean(data))
ans*100
}
s_mean<-function(data)
{
n = length(data)
sd(data)/(n^0.5)
}
rs_mean<-function(data)
{
s_mean(data)/mean(data)
}
d = c(1,2,3,4,5,6,7,8,9,10)
mean(d)
median(d)
range(d)
avg_dev(d)
rel_avg_dev(d)
sd(d)
rsd(d)
var(d)
s_mean(d)
rs_mean(d)
setwd("D:/Docs/IITD/personal/BTP/code/BTP/distance_matrix/Locations")
a = [12]
a =c("1","2")]
a =c("1","2")
a[1]
f = "https://dev.virtualearth.net/REST/v1/Routes/DistanceMatrix?origins="
s = "&destinations="
t = "&travelMode=driving&key=AjPUy6L3ZouH31A3BNigLLscOSzXqecAAKedFQDMjFG3paD0-n5TkuCNBRiVqCiU"
library(data.table)
library(httr)
library(jsonlite)
data = read.csv("rvs.csv") ###
data = data[,]
data$latitude = as.character(data$latitude)
data$longitude = as.character(data$longitude)
data$cor = paste(data$latitude,data$longitude,sep = ",")
origin = data$cor[1]
if(nrow(data)>1){
for(i in 2:nrow(data)){
origin = paste(origin,data[i,8],sep=";")
}
}
index_names_origin = data$name
data = read.csv("dvs_remaining.csv")   ####
data = data[1:nrow(data),]
data$latitude = as.character(data$latitude)
data$longitude = as.character(data$longitude)
data$cor = paste(data$latitude,data$longitude,sep = ",")
dest = data$cor[1]
if(nrow(data)>1){
for(i in 2:nrow(data)){
dest = paste(dest,data[i,8],sep=";")
}
}
index_names_dest = data$name
url = paste(f,origin,s,dest,t,sep = "")
js = GET(url)
js = content(js)
json1 = jsonlite::fromJSON(toJSON(js))
data = json1$resourceSets$resources[[1]]$results
ata
data
data = as.data.table(data)
data$destinationIndex = as.numeric(data$destinationIndex)
data$originIndex = as.numeric(data$originIndex)
data$travelDistance = as.numeric(data$travelDistance)
data = data[,c(1,2,4)]
data = dcast(data,originIndex~destinationIndex,value.var = "travelDistance")
colnames(data) = c("RVS/DVS",index_names_dest) ###
data$`DVS/PHC` = index_names_origin    ###
data
final = data
write.csv(final,file = ".\\RVS-DVS_remaining.csv",row.names = F)
k = 1
print(k)
data = read.csv("dvs_remaining.csv") ###
data = data[,]
data$latitude = as.character(data$latitude)
data$longitude = as.character(data$longitude)
data$cor = paste(data$latitude,data$longitude,sep = ",")
origin = data$cor[1]
if(nrow(data)>1){
for(i in 2:nrow(data)){
origin = paste(origin,data[i,8],sep=";")
}
}
index_names_origin = data$name
i = 0
i = 1
k = (60*i)
print(k)
data = read.csv("phc_.csv")   ####
data = data[60*(i-1)+1:60*i,]
data
data$latitude = as.character(data$latitude)
data$longitude = as.character(data$longitude)
data$cor = paste(data$latitude,data$longitude,sep = ",")
dest = data$cor[1]
if(nrow(data)>1){
for(i in 2:nrow(data)){
dest = paste(dest,data[i,8],sep=";")
}
}
index_names_dest = data$name
url = paste(f,origin,s,dest,t,sep = "")
js = GET(url)
js = content(js)
json1 = jsonlite::fromJSON(toJSON(js))
data = json1$resourceSets$resources[[1]]$results
data = as.data.table(data)
data
data$destinationIndex = as.numeric(data$destinationIndex)
data$originIndex = as.numeric(data$originIndex)
data$travelDistance = as.numeric(data$travelDistance)
data = data[,c(1,2,4)]
data = dcast(data,originIndex~destinationIndex,value.var = "travelDistance")
colnames(data) = c("DVS/PHC",index_names_dest) ###
data$`DVS/PHC` = index_names_origin    ###
write.csv(data,file = ".\\DVS-PHC_remaining.csv",row.names = F)   ###
i = 2
k = (60*i)
print(k)
data = read.csv("phc_.csv")   ####
data = data[60*(i-1)+1:60*i,]
data
data = read.csv("phc_.csv")   ####
data
data[60*(i-1)+1:60*i,]
data[61:120,]
data[61:120,]
60*(i-1)+1
data = data[(60*(i-1)+1):(60*i),]
data = read.csv("phc_.csv")   ####
data = data[(60*(i-1)+1):(60*i),]
data
i = 1
i = 2
k = (60*i)
print(k)
data = read.csv("phc_.csv")   ####
data = data[(60*(i-1)+1):(60*i),]
data
data$latitude = as.character(data$latitude)
data$longitude = as.character(data$longitude)
data$cor = paste(data$latitude,data$longitude,sep = ",")
dest = data$cor[1]
if(nrow(data)>1){
for(i in 2:nrow(data)){
dest = paste(dest,data[i,8],sep=";")
}
}
index_names_dest = data$name
url = paste(f,origin,s,dest,t,sep = "")
js = GET(url)
js = content(js)
json1 = jsonlite::fromJSON(toJSON(js))
data = json1$resourceSets$resources[[1]]$results
data = as.data.table(data)
data$destinationIndex = as.numeric(data$destinationIndex)
data$originIndex = as.numeric(data$originIndex)
data$travelDistance = as.numeric(data$travelDistance)
data = data[,c(1,2,4)]
data = dcast(data,originIndex~destinationIndex,value.var = "travelDistance")
colnames(data) = c("DVS/PHC",index_names_dest) ###
data$`DVS/PHC` = index_names_origin    ###
#write.csv(data,file = ".\\DVS-PHC_remaining.csv",row.names = F)   ###
final = read.csv("DVS-PHC_remaining.csv")
final = cbind(final,data[,-1])
write.csv(final,file = ".\\DVS-PHC_remaining.csv",row.names = F)
for (i in 3:10)
{
k = (60*i)
print(k)
data = read.csv("phc_.csv")   ####
data = data[(60*(i-1)+1):(60*i),]
data$latitude = as.character(data$latitude)
data$longitude = as.character(data$longitude)
data$cor = paste(data$latitude,data$longitude,sep = ",")
dest = data$cor[1]
if(nrow(data)>1){
for(i in 2:nrow(data)){
dest = paste(dest,data[i,8],sep=";")
}
}
index_names_dest = data$name
url = paste(f,origin,s,dest,t,sep = "")
js = GET(url)
js = content(js)
json1 = jsonlite::fromJSON(toJSON(js))
data = json1$resourceSets$resources[[1]]$results
data = as.data.table(data)
data$destinationIndex = as.numeric(data$destinationIndex)
data$originIndex = as.numeric(data$originIndex)
data$travelDistance = as.numeric(data$travelDistance)
data = data[,c(1,2,4)]
data = dcast(data,originIndex~destinationIndex,value.var = "travelDistance")
colnames(data) = c("DVS/PHC",index_names_dest) ###
data$`DVS/PHC` = index_names_origin    ###
#write.csv(data,file = ".\\DVS-PHC_remaining.csv",row.names = F)   ###
final = read.csv("DVS-PHC_remaining.csv")
final = cbind(final,data[,-1])
write.csv(final,file = ".\\DVS-PHC_remaining.csv",row.names = F)
}
for (i in 3:10)
{
k = (60*i)
print(k)
data = read.csv("phc_.csv")   ####
data = data[(60*(i-1)+1):(60*i),]
data$latitude = as.character(data$latitude)
data$longitude = as.character(data$longitude)
data$cor = paste(data$latitude,data$longitude,sep = ",")
dest = data$cor[1]
if(nrow(data)>1){
for(i in 2:nrow(data)){
dest = paste(dest,data[i,8],sep=";")
}
}
index_names_dest = data$name
url = paste(f,origin,s,dest,t,sep = "")
js = GET(url)
js = content(js)
json1 = jsonlite::fromJSON(toJSON(js))
data = json1$resourceSets$resources[[1]]$results
data = as.data.table(data)
data$destinationIndex = as.numeric(data$destinationIndex)
data$originIndex = as.numeric(data$originIndex)
data$travelDistance = as.numeric(data$travelDistance)
data = data[,c(1,2,4)]
data = dcast(data,originIndex~destinationIndex,value.var = "travelDistance")
colnames(data) = c("DVS/PHC",index_names_dest) ###
data$`DVS/PHC` = index_names_origin    ###
#write.csv(data,file = ".\\DVS-PHC_remaining.csv",row.names = F)   ###
final = read.csv("DVS-PHC_remaining.csv")
final = cbind(final,data[,-1])
write.csv(final,file = ".\\DVS-PHC_remaining.csv",row.names = F)
}
data = read.csv("phc_.csv")   ####
data = data[601:606,]
data$latitude = as.character(data$latitude)
data$longitude = as.character(data$longitude)
data$cor = paste(data$latitude,data$longitude,sep = ",")
dest = data$cor[1]
if(nrow(data)>1){
for(i in 2:nrow(data)){
dest = paste(dest,data[i,8],sep=";")
}
}
index_names_dest = data$name
url = paste(f,origin,s,dest,t,sep = "")
js = GET(url)
js = content(js)
json1 = jsonlite::fromJSON(toJSON(js))
data = json1$resourceSets$resources[[1]]$results
data = as.data.table(data)
data$destinationIndex = as.numeric(data$destinationIndex)
data$originIndex = as.numeric(data$originIndex)
data$travelDistance = as.numeric(data$travelDistance)
data = data[,c(1,2,4)]
data = dcast(data,originIndex~destinationIndex,value.var = "travelDistance")
colnames(data) = c("DVS/PHC",index_names_dest) ###
data$`DVS/PHC` = index_names_origin    ###
#write.csv(data,file = ".\\DVS-PHC_remaining.csv",row.names = F)   ###
final = read.csv("DVS-PHC_remaining.csv")
final = cbind(final,data[,-1])
write.csv(final,file = ".\\DVS-PHC_remaining.csv",row.names = F)
